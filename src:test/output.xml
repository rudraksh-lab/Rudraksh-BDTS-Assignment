<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.7.3 on darwin)" generated="20200807 19:45:10.629" rpa="false">
<suite id="s1" name="Test Assignment" source="/Users/rudrakshawasthy/Documents/Python_Tests/BDTS Assignment/src:test/test_assignment.robot">
<test id="s1-t1" name="TC_01_List of Users Check : /users">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>bpdts</arg>
<arg>${BASE URL}</arg>
</arguments>
<msg timestamp="20200807 19:45:10.769" level="INFO">Creating Session using : alias=bpdts, url=http://bpdts-test-app-v2.herokuapp.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200807 19:45:10.769" endtime="20200807 19:45:10.769"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>bpdts</arg>
<arg>/users</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200807 19:45:10.968" level="INFO">GET Request : url=http://bpdts-test-app-v2.herokuapp.com/users 
 path_url=/users 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200807 19:45:10.973" level="INFO">GET Response : url=http://bpdts-test-app-v2.herokuapp.com/users 
 status=200, reason=OK 
 body=[{"id": 1, "first_name": "Maurise", "last_name": "Shieldon", "email": "mshieldon0@squidoo.com", "ip_address": "192.57.232.111", "latitude": 34.003135, "longitude": -117.7228641}, {"id": 2, "first_name": "Bendix", "last_name": "Halgarth", "email": "bhalgarth1@timesonline.co.uk", "ip_address": "4.185.73.82", "latitude": -2.9623869, "longitude": 104.7399789}, {"id": 3, "first_name": "Meghan", "last_name": "Southall", "email": "msouthall2@ihg.com", "ip_address": "21.243.184.215", "latitude": "15.45033", "longitude": "44.12768"}, {"id": 4, "first_name": "Sidnee", "last_name": "Silwood", "email": "ssilwood3@gizmodo.com", "ip_address": "77.55.231.220", "latitude": -26.94087, "longitude": 29.24905}, {"id": 5, "first_name": "Rosita", "last_name": "Ferrulli", "email": "rferrulli4@unesco.org", "ip_address": "182.189.27.66", "latitude": 33.5719791, "longitude": -84.3396421}, {"id": 6, "first_name": "Ferdinand", "last_name": "Dun", "email": "fdun5@google.es", "ip_address": "219.245.140.98", "latitude": 47.3879065, "longitude": 19.1150392}, {"id": 7, "first_name": "Keven", "last_name": "Paling", "email": "kpaling6@alexa.com", "ip_address": "144.96.77.21", "latitude": 9.9578348, "longitude": 124.1789637}, {"id": 8, "first_name": "Carri", "last_name": "Server", "email": "cserver7@google.nl", "ip_address": "222.203.3.67", "latitude": -6.1130137, "longitude": 106.1610343}, {"id": 9, "first_name": "Keelia", "last_name": "Gillian", "email": "kgillian8@independent.co.uk", "ip_address": "153.44.232.220", "latitude": 5.9630513, "longitude": 10.1591213}, {"id": 10, "first_name": "Brennan", "last_name": "Matej", "email": "bmatej9@umich.edu", "ip_address": "252.214.166.100", "latitude": 41.1086264, "longitude": -7.6901721}, {"id": 11, "first_name": "Dorree", "last_name": "Bouttell", "email": "dbouttella@artisteer.com", "ip_address": "252.2.180.171", "latitude": 28.730583, "longitude": 107.084012}, {"id": 12, "first_name": "Hugibert", "last_name": "Dore", "email": "hdoreb@unesco.org", "ip_address": "44.17.237.159", "latitude": 25.4765601, "longitude": -108.0887656}, {"id": 13, "first_name": "Curtis", "last_name": "Headan", "email": "cheadanc@nytimes.com", "ip_address": "29.24.212.227", "latitude": -14.8851268, "longitude": 47.9960743}, {"id": 14, "first_name": "Meier", "last_name": "Sturney", "email": "msturneyd@mapy.cz", "ip_address": "42.233.161.247", "latitude": -5.2368931, "longitude": -75.6557206}, {"id": 15, "first_name": "Roanne", "last_name": "Copland", "email": "rcoplande@example.com", "ip_address": "25.253.221.139", "latitude": 29.560254, "longitude": 106.454213}, {"id": 16, "first_name": "Annalise", "last_name": "Klosser", "email": "aklosserf@vk.com", "ip_address": "116.129.11.171", "latitude": 7.357338, "longitude": 149.200361}, {"id": 17, "first_name": "Sandra", "last_name": "Winterbourne", "email": "swinterbourneg@ox.ac.uk", "ip_address": "127.179.78.76", "latitude": -6.2822524, "longitude": 107.2518631}, {"id": 18, "first_name": "Chiquia", "last_name": "Caston", "email": "ccastonh@who.int", "ip_address": "45.121.189.178", "latitude": 35.0876436, "longitude": 36.216972}, {"id": 19, "first_name": "Jeane", "last_name": "de Juares", "email": "jdejuaresi@exblog.jp", "ip_address": "97.162.35.153", "latitude": 32.6797904, "longitude": -5.5781378}, {"id": 20, "first_name": "Alard", "last_name": "Kacheler", "email": "akachelerj@google.co.uk", "ip_address": "161.87.0.198", "latitude": -6.9547303, "longitude": 107.3787448}, {"id": 21, "first_name": "Jenni", "last_name": "Messenbird", "email": "jmessenbirdk@merriam-webster.com", "ip_address": "142.141.174.5", "latitude": "34.15599", "longitude": "64.78566"}, {"id": 22, "first_name": "Freeman", "last_name": "Stearnes", "email": "fstearnesl@posterous.com", "ip_address": "204.140.153.110", "latitude": -8.2296365, "longitude": 111.4526032}, {"id": 23, "first_name": "Gregorius", "last_name": "Curme", "email": "gcurmem@lulu.com", "ip_address": "24.217.167.216", "latitude": 44.8464736, "longitude": 33.6744583}, {"id": 24, "first_name": "Neville", "last_name": "Kolodziej", "email": "nkolodziejn@smugmug.com", "ip_address": "27.110.128.25", "latitude": 29.703113, "longitude": 107.389298}, {"id": 25, "first_name": "Caryl", "last_name": "Ruberry", "email": "cruberryo@smugmug.com", "ip_address": "222.10.201.47", "latitude": 11.8554828, "longitude": -86.2183907}, {"id": 26, "first_name": "Tripp", "last_name": "Matzel", "email": "tmatzelp@wikia.com", "ip_address": "82.91.242.14", "latitude": -27.3482312, "longitude": -51.6044276}, {"id": 27, "first_name": "Trix", "last_name": "Goldring", "email": "tgoldringq@dyndns.org", "ip_address": "19.41.234.15", "latitude": 32.31, "longitude": -106.78}, {"id": 28, "first_name": "Thomas", "last_name": "Iley", "email": "tileyr@netscape.com", "ip_address": "135.93.137.158", "latitude": 40.4222721, "longitude": -7.921883}, {"id": 29, "first_name": "Gwenore", "last_name": "Lethbury", "email": "glethburys@miitbeian.gov.cn", "ip_address": "223.59.78.190", "latitude": -8.091221, "longitude": 111.9641728}, {"id": 30, "first_name": "Pia", "last_name": "Linford", "email": "plinfordt@hubpages.com", "ip_address": "70.153.0.168", "latitude": 48.7233569, "longitude": 14.6338236}, {"id": 31, "first_name": "Nolan", "last_name": "Castelletto", "email": "ncastellettou@yellowbook.com", "ip_address": "253.133.98.232", "latitude": 50.3919, "longitude": 30.368267}, {"id": 32, "first_name": "Lewes", "last_name": "Shorten", "email": "lshortenv@rediff.com", "ip_address": "131.105.143.66", "latitude": 45.020739, "longitude": 14.6315962}, {"id": 33, "first_name": "Menard", "last_name": "Rachuig", "email": "mrachuigw@oakley.com", "ip_address": "155.67.217.88", "latitude": 25.6829687, "longitude": 100.1325059}, {"id": 34, "first_name": "Marcelline", "last_name": "Olwen", "email": "molwenx@pcworld.com", "ip_address": "117.157.31.19", "latitude": 29.813041, "longitude": 106.738324}, {"id": 35, "first_name": "Colver", "last_name": "Elcott", "email": "celcotty@free.fr", "ip_address": "182.109.21.118", "latitude": -7.8862987, "longitude": 110.4649383}, {"id": 36, "first_name": "Jillie", "last_name": "Doddemeede", "email": "jdoddemeedez@nytimes.com", "ip_address": "103.134.163.56", "latitude": 50.2577508, "longitude": 58.432675}, {"id": 37, "first_name": "Lew", "last_name": "Marioneau", "email": "lmarioneau10@craigslist.org", "ip_address": "59.64.40.106", "latitude": -10.5086496, "longitude": -37.4467952}, {"id": 38, "first_name": "Reuben", "last_name": "Palfrey", "email": "rpalfrey11@pinterest.com", "ip_address": "141.134.82.204", "latitude": 36.8199022, "longitude": 21.7063018}, {"id": 39, "first_name": "Bennie", "last_name": "Spinello", "email": "bspinello12@stanford.edu", "ip_address": "30.61.30.134", "latitude": -20.344124, "longitude": 164.4393897}, {"id": 40, "first_name": "Rodrick", "last_name": "Purdon", "email": "rpurdon13@netlog.com", "ip_address": "52.14.37.43", "latitude": 4.4979714, "longitude": -73.9118159}, {"id": 41, "first_name": "Nisse", "last_name": "Tonna", "email": "ntonna14@google.fr", "ip_address": "244.84.30.42", "latitude": 58.7103464, "longitude": 50.1704702}, {"id": 42, "first_name": "Ruthann", "last_name": "Brackenbury", "email": "rbrackenbury15@usgs.gov", "ip_address": "116.150.254.237", "latitude": 32.6434902, "longitude": 35.9396453}, {"id": 43, "first_name": "Lynde", "last_name": "D'Alessio", "email": "ldalessio16@gnu.org", "ip_address": "170.65.177.146", "latitude": 41.340135, "longitude": -8.1456405}, {"id": 44, "first_name": "Desirae", "last_name": "Paffley", "email": "dpaffley17@usa.gov", "ip_address": "225.3.89.143", "latitude": -16.1073563, "longitude": 46.6463975}, {"id": 45, "first_name": "Diann", "last_name": "Longmire", "email": "dlongmire18@ed.gov", "ip_address": "71.86.120.63", "latitude": 34.8323566, "longitude": 33.5895956}, {"id": 46, "first_name": "Maurene", "last_name": "Fasler", "email": "mfasler19@taobao.com", "ip_address": "236.54.90.236", "latitude": 33.5068235, "longitude": 70.6960868}, {"id": 47, "first_name": "Gib", "last_name": "Alsop", "email": "galsop1a@smugmug.com", "ip_address": "242.208.9.67", "latitude": -22.8841363, "longitude": -48.4412549}, {"id": 48, "first_name": "Cosmo", "last_name": "Kindleside", "email": "ckindleside1b@cbsnews.com", "ip_address": "19.127.125.220", "latitude": 36.195409, "longitude": 113.116404}, {"id": 49, "first_name": "Nikolai", "last_name": "McGarrie", "email": "nmcgarrie1c@techcrunch.com", "ip_address": "141.121.121.91", "latitude": 57.6814887, "longitude": 39.8556491}, {"id": 50, "first_name": "Charlot", "last_name": "Hockey", "email": "chockey1d@gov.uk", "ip_address": "38.124.22.205", "latitude": -34.7903355, "longitude": -56.3502545}, {"id": 51, "first_name": "Piotr", "last_name": "Bryden", "email": "pbryden1e@wiley.com", "ip_address": "250.186.154.219", "latitude": 48.9809916, "longitude": 117.3883737}, {"id": 52, "first_name": "Kamillah", "last_name": "Kindon", "email": "kkindon1f@imageshack.us", "ip_address": "0.222.151.204", "latitude": 30.780217, "longitude": 120.644805}, {"id": 53, "first_name": "Tome", "last_name": "Cator", "email": "tcator1g@google.com.br", "ip_address": "44.195.6.233", "latitude": 55.9070639, "longitude": 52.2871629}, {"id": 54, "first_name": "Dore", "last_name": "Abbotts", "email": "dabbotts1h@eepurl.com", "ip_address": "178.208.182.58", "latitude": -19.1694375, "longitude": 46.7405959}, {"id": 55, "first_name": "Roi", "last_name": "Hacun", "email": "rhacun1i@dion.ne.jp", "ip_address": "102.31.14.116", "latitude": 41.096515, "longitude": 45.4741645}, {"id": 56, "first_name": "Teressa", "last_name": "MacAlpine", "email": "tmacalpine1j@360.cn", "ip_address": "79.252.186.80", "latitude": 53.3983079, "longitude": 20.9461113}, {"id": 57, "first_name": "Jard", "last_name": "de Mendoza", "email": "jdemendoza1k@columbia.edu", "ip_address": "88.173.196.74", "latitude": 13.4218445, "longitude": 120.4189146}, {"id": 58, "first_name": "Arther", "last_name": "Veronique", "email": "avero... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20200807 19:45:10.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200807 19:45:10.769" endtime="20200807 19:45:10.974"></status>
</kw>
<kw name="Request Should Be Successful" library="RequestsLibrary">
<doc>Fails if response status code is a client or server error (4xx, 5xx).</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:10.975" endtime="20200807 19:45:10.975"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>200</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:10.975" endtime="20200807 19:45:10.976"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<msg timestamp="20200807 19:45:10.980" level="INFO">Length is 1000</msg>
<status status="PASS" starttime="20200807 19:45:10.976" endtime="20200807 19:45:10.980"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20200807 19:45:10.984" level="INFO">Length is 1000</msg>
<msg timestamp="20200807 19:45:10.984" level="INFO">${len} = 1000</msg>
<status status="PASS" starttime="20200807 19:45:10.980" endtime="20200807 19:45:10.984"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${len}</arg>
<arg>1000</arg>
</arguments>
<msg timestamp="20200807 19:45:10.985" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200807 19:45:10.984" endtime="20200807 19:45:10.985"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:10.985" endtime="20200807 19:45:10.998"></status>
</kw>
<status status="PASS" starttime="20200807 19:45:10.768" endtime="20200807 19:45:10.998" critical="yes"></status>
</test>
<test id="s1-t2" name="TC_02_Valid User Search by Given User ID : /user/{id}">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>bpdts</arg>
<arg>${BASE URL}</arg>
</arguments>
<msg timestamp="20200807 19:45:11.000" level="INFO">Creating Session using : alias=bpdts, url=http://bpdts-test-app-v2.herokuapp.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200807 19:45:10.999" endtime="20200807 19:45:11.000"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>bpdts</arg>
<arg>/user/${VALID USER}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200807 19:45:11.051" level="INFO">GET Request : url=http://bpdts-test-app-v2.herokuapp.com/user/222 
 path_url=/user/222 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200807 19:45:11.051" level="INFO">GET Response : url=http://bpdts-test-app-v2.herokuapp.com/user/222 
 status=200, reason=OK 
 body={"id": 222, "first_name": "Norrie", "last_name": "Worthington", "email": "nworthington65@arstechnica.com", "ip_address": "96.85.220.149", "latitude": "16.959", "longitude": "120.7469", "city": "Comillas Norte"}
 
 </msg>
<msg timestamp="20200807 19:45:11.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200807 19:45:11.000" endtime="20200807 19:45:11.051"></status>
</kw>
<kw name="Request Should Be Successful" library="RequestsLibrary">
<doc>Fails if response status code is a client or server error (4xx, 5xx).</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.052" endtime="20200807 19:45:11.052"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>200</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.052" endtime="20200807 19:45:11.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['first_name']}</arg>
<arg>Norrie</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.053" endtime="20200807 19:45:11.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.json()['last_name']}</arg>
<arg>Worthington</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.054" endtime="20200807 19:45:11.055"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.055" endtime="20200807 19:45:11.056"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['connection']}</arg>
<arg>keep-alive</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.056" endtime="20200807 19:45:11.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['content-type']}</arg>
<arg>application/json</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.057" endtime="20200807 19:45:11.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['server']}</arg>
<arg>gunicorn/19.9.0</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.058" endtime="20200807 19:45:11.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['via']}</arg>
<arg>1.1 vegur</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.059" endtime="20200807 19:45:11.059"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp.headers}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.059" endtime="20200807 19:45:11.060"></status>
</kw>
<status status="PASS" starttime="20200807 19:45:10.999" endtime="20200807 19:45:11.060" critical="yes"></status>
</test>
<test id="s1-t3" name="TC_03_Invalid User Search by Given Invalid/Missing User ID : /user/{id}">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>bpdts</arg>
<arg>${BASE URL}</arg>
</arguments>
<msg timestamp="20200807 19:45:11.062" level="INFO">Creating Session using : alias=bpdts, url=http://bpdts-test-app-v2.herokuapp.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200807 19:45:11.062" endtime="20200807 19:45:11.062"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>bpdts</arg>
<arg>/user/${INVALID USER}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200807 19:45:11.111" level="INFO">GET Request : url=http://bpdts-test-app-v2.herokuapp.com/user/007 
 path_url=/user/007 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200807 19:45:11.112" level="INFO">GET Response : url=http://bpdts-test-app-v2.herokuapp.com/user/007 
 status=404, reason=NOT FOUND 
 body={"message": "Id 007 doesn't exist. You have requested this URI [/user/007] but did you mean /user/&lt;string:id&gt; or /users ?"}
 
 </msg>
<msg timestamp="20200807 19:45:11.112" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20200807 19:45:11.063" endtime="20200807 19:45:11.112"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>404</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.113" endtime="20200807 19:45:11.114"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.114" endtime="20200807 19:45:11.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['connection']}</arg>
<arg>keep-alive</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.116" endtime="20200807 19:45:11.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['content-type']}</arg>
<arg>application/json</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.120" endtime="20200807 19:45:11.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['server']}</arg>
<arg>gunicorn/19.9.0</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.121" endtime="20200807 19:45:11.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['via']}</arg>
<arg>1.1 vegur</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.122" endtime="20200807 19:45:11.123"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp.headers}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.123" endtime="20200807 19:45:11.124"></status>
</kw>
<status status="PASS" starttime="20200807 19:45:11.061" endtime="20200807 19:45:11.125" critical="yes"></status>
</test>
<test id="s1-t4" name="TC_04_List of Users Check for Given Valid City : /city/{city}/users">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>bpdts</arg>
<arg>${BASE URL}</arg>
</arguments>
<msg timestamp="20200807 19:45:11.127" level="INFO">Creating Session using : alias=bpdts, url=http://bpdts-test-app-v2.herokuapp.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200807 19:45:11.127" endtime="20200807 19:45:11.128"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>bpdts</arg>
<arg>/city/${VALID CITY}/users</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200807 19:45:11.240" level="INFO">GET Request : url=http://bpdts-test-app-v2.herokuapp.com/city/London/users 
 path_url=/city/London/users 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200807 19:45:11.241" level="INFO">GET Response : url=http://bpdts-test-app-v2.herokuapp.com/city/London/users 
 status=200, reason=OK 
 body=[{"id": 135, "first_name": "Mechelle", "last_name": "Boam", "email": "mboam3q@thetimes.co.uk", "ip_address": "113.71.242.187", "latitude": -6.5115909, "longitude": 105.652983}, {"id": 396, "first_name": "Terry", "last_name": "Stowgill", "email": "tstowgillaz@webeden.co.uk", "ip_address": "143.190.50.240", "latitude": -6.7098551, "longitude": 111.3479498}, {"id": 520, "first_name": "Andrew", "last_name": "Seabrocke", "email": "aseabrockeef@indiegogo.com", "ip_address": "28.146.197.176", "latitude": "27.69417", "longitude": "109.73583"}, {"id": 658, "first_name": "Stephen", "last_name": "Mapstone", "email": "smapstonei9@bandcamp.com", "ip_address": "187.79.141.124", "latitude": -8.1844859, "longitude": 113.6680747}, {"id": 688, "first_name": "Tiffi", "last_name": "Colbertson", "email": "tcolbertsonj3@vimeo.com", "ip_address": "141.49.93.0", "latitude": 37.13, "longitude": -84.08}, {"id": 794, "first_name": "Katee", "last_name": "Gopsall", "email": "kgopsallm1@cam.ac.uk", "ip_address": "203.138.133.164", "latitude": 5.7204203, "longitude": 10.901604}]
 
 </msg>
<msg timestamp="20200807 19:45:11.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200807 19:45:11.128" endtime="20200807 19:45:11.241"></status>
</kw>
<kw name="Request Should Be Successful" library="RequestsLibrary">
<doc>Fails if response status code is a client or server error (4xx, 5xx).</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.242" endtime="20200807 19:45:11.243"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>200</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.243" endtime="20200807 19:45:11.243"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<msg timestamp="20200807 19:45:11.244" level="INFO">Length is 6</msg>
<status status="PASS" starttime="20200807 19:45:11.244" endtime="20200807 19:45:11.244"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20200807 19:45:11.245" level="INFO">Length is 6</msg>
<msg timestamp="20200807 19:45:11.246" level="INFO">${len} = 6</msg>
<status status="PASS" starttime="20200807 19:45:11.245" endtime="20200807 19:45:11.246"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${len}</arg>
<arg>6</arg>
</arguments>
<msg timestamp="20200807 19:45:11.246" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200807 19:45:11.246" endtime="20200807 19:45:11.247"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.247" endtime="20200807 19:45:11.248"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['connection']}</arg>
<arg>keep-alive</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.248" endtime="20200807 19:45:11.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['content-type']}</arg>
<arg>application/json</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.249" endtime="20200807 19:45:11.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['server']}</arg>
<arg>gunicorn/19.9.0</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.250" endtime="20200807 19:45:11.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['via']}</arg>
<arg>1.1 vegur</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.251" endtime="20200807 19:45:11.252"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp.headers}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.252" endtime="20200807 19:45:11.252"></status>
</kw>
<status status="PASS" starttime="20200807 19:45:11.126" endtime="20200807 19:45:11.253" critical="yes"></status>
</test>
<test id="s1-t5" name="TC_05_List of Users Check for Given Invalid/Missing City : /city/{city}/users">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>bpdts</arg>
<arg>${BASE URL}</arg>
</arguments>
<msg timestamp="20200807 19:45:11.255" level="INFO">Creating Session using : alias=bpdts, url=http://bpdts-test-app-v2.herokuapp.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20200807 19:45:11.254" endtime="20200807 19:45:11.255"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>bpdts</arg>
<arg>/city/${INVALID CITY}/users</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200807 19:45:11.302" level="INFO">GET Request : url=http://bpdts-test-app-v2.herokuapp.com/city/Bangalore/users 
 path_url=/city/Bangalore/users 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200807 19:45:11.302" level="INFO">GET Response : url=http://bpdts-test-app-v2.herokuapp.com/city/Bangalore/users 
 status=200, reason=OK 
 body=[]
 
 </msg>
<msg timestamp="20200807 19:45:11.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200807 19:45:11.255" endtime="20200807 19:45:11.302"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>200</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.303" endtime="20200807 19:45:11.303"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<msg timestamp="20200807 19:45:11.304" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200807 19:45:11.303" endtime="20200807 19:45:11.304"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp.json()}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.304" endtime="20200807 19:45:11.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['connection']}</arg>
<arg>keep-alive</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.305" endtime="20200807 19:45:11.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['content-type']}</arg>
<arg>application/json</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.305" endtime="20200807 19:45:11.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['server']}</arg>
<arg>gunicorn/19.9.0</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.306" endtime="20200807 19:45:11.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.headers['via']}</arg>
<arg>1.1 vegur</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.307" endtime="20200807 19:45:11.307"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp.headers}</arg>
</arguments>
<status status="PASS" starttime="20200807 19:45:11.307" endtime="20200807 19:45:11.307"></status>
</kw>
<status status="PASS" starttime="20200807 19:45:11.253" endtime="20200807 19:45:11.308" critical="yes"></status>
</test>
<doc>Simple API Test Implementation with Robot Framework for Get Operations</doc>
<status status="PASS" starttime="20200807 19:45:10.630" endtime="20200807 19:45:11.308"></status>
</suite>
<statistics>
<total>
<stat pass="5" fail="0">Critical Tests</stat>
<stat pass="5" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" id="s1" name="Test Assignment">Test Assignment</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
